常用的API函数(pythpn版)
 获取信息类API
（1）获取默认系统语言对应的Strings.xml文件内的数据。
get_app_string()
（2）查找某一个语言环境对应的字符串文件Strings.xml内数据。
get_app_string(String language)
（3）获取当前activity,比如（.ApiDemos）
current_activity()
 App安装与卸载类API
（1）根据bundleId来判断该应用是否已经安装
is_app_installed(String bundleId)
（2）安装app，appPath为应用的本地路径
install_app(String appPath)
（3）卸载app.bundleId在android中代表的是包名，而在ios中有专门的bundleId号。
remove_app(String bundleId)
（4）关闭应用，其实就是按home键把应用置于后台
close_app()
（5）启动应用
launch_app()
（6）先closeApp然后在launchAPP
reset_app()
文件操作类API
（1）将字符数组用64位格式写到远程目录的某个文件中。也可以理解为把本地文件push到设备上。
push_file(String remotePath, byte[] base64Data)
（2）将设备上的文件pull到本地硬盘上
pull_file(String remotePath)
（3）将设备上的文件夹pull到本地硬盘上，一般远程文件为/data/local/tmp下的文件。
pull_folder(String remotePath)
设置相关类API
（1）设置手机的网络连接状态，可以开关蓝牙、wifi、数据流量。通过NetworkConnectionSetting中的属性来设置各个网络连接的状态。
set_network_connect(NetworkConnectionSetting connection)
（2）得到当前网络的状态
get_network_connection()
用户操作类API
（1）ios隐藏键盘
hide_keyboard()
（2）隐藏键盘，只能用于ios上。
hide_keyboard(String strategy, String keyName)
（3）按下某个键，具体哪个键由key值决定，key值定义在AndroidKeyCode类中
send_key_event(int key)
（4）执行一个touch动作，该touch动作是由TouchAction封装的。
perform_touchAction(TouchAction touchAction)
（5）点击element控件中心点按下，duration*5毫秒秒后松开，如此重复fingers次。
tap(int fingers, WebElement element, int duration)
（6）点击(x,y)点按下，duration*5毫秒后松开，如此重复fingers次。
tap(int fingers, int x, int y, int duration)
（7）从(startx,starty)滑到（endx,endy），分duration步滑，每一步用时是5毫秒。
swipe(int startx, int starty, int endx, int endy, int duration)
（8）2个手指操作控件，从对角线向中心点滑动。
pinch(WebElement el)
（9）以（x,y）为基准，计算得出（x,y-100）,(x,y+100)两个点，然后2个手指按住这两个点同时滑到（x,y）
pinch(int x, int y)
(10)与pinch(el)的动作刚好相反。两个手指由控件的中心点慢慢向控件的左顶点后右底点滑动。
zoom(WebElement el)
(11)和pinch(x,y)相反。两个手指从（x,y）点开始向（x,y-100）和（x,y+100）滑动。
zoom(int x, int y)
(12)锁屏多少秒后解锁
lock_screen(int seconds)
(13)模拟摇晃手机
shake()
(14)滚动到某个text属性为指定的字符串的控件
scroll_to(String text)
(15)滚动方向由element1到element2
scroll(element1,element2)  
(16)滚动到某个text属性包含传入的字符串的控件
scroll_to_exact(String text)
(17)设置上下文
context(String name)
(18)可用上下文
get_context_handles()
(19)当前上下文
get_context()
(20)设置屏幕横屏或者竖屏
rotate(ScreenOrientation orientation)
(21)获取当前屏幕的方向
get_orientation()
获取控件类API
seleniumdriver
find_element_by_id
find_elements_by_id
find_element_by_name
find_elements_by_name
find_element_by_link_text
find_elements_by_link_text
find_element_by_partial_link_text
find_elements_by_partial_link_text
find_element_by_tag_name
find_elements_by_tag_name
find_element_by_xpath
find_elements_by_xpath
find_element_by_class_name
find_elements_by_class_name
find_element_by_css_selector
find_elements_by_css_selector
appiumdriver
find_element_by_ios_uiautomation
find_elements_by_ios_uiautomation
find_element_by_android_uiautomator
find_elements_by_android_uiautomator
find_element_by_accessibility_id
find_elements_by_accessibility_id
AppiumDriver的辅助类
主要针对手势操作，比如滑动、长按、拖动等。TouchAction的原理是讲一系列的动作放在一个链条中，然后将该链条传递给服务器。服务器接受到该链条后，解析各个动作，逐个执行。
TouchAction()
（1）在控件上执行press操作
press(WebElement el)
（2）在坐标为（x,y）的点执行press操作
press(int x, int y)
（3）在控件el的左上角的x坐标偏移x单位，y左边偏移y单位的坐标上执行press操作。
press(WebElement el, int x, int y)
（4）释放操作，代表该系列动作的一个结束标志。
release() 
（5）以el为目标，从另一个点移动到该目标上
move_to(WebElement el)
（6）以（x,y）点为目标，从另一个点移动到该目标上
move_to( int x, int y)
(7) 在控件的中心点上敲击一下
tap(WebElement el)
(8)在（x,y）点轻击一下
tap(int x, int y)
(9)以控件el的左上角为基准，x轴向右移动x单位，y轴向下移动y单位。在该点上轻击。
tap(WebElement el, int x, int y)
(10)代表一个空操作，等待一段时间
wait_action()
(11)等待ms秒
wait_action(int ms)
(12)控件长按
long_press(WebElement el)
(13)点长按
long_press(int x, int y)
（14）偏移点长按
long_press(WebElement el, int x, int y) 
（15）取消执行该动作
cancel()
3.2 关于API的一些说明
  Appium是一个庞大的测试框架，当然其对应的API也是很多的，我没有找到详细的介绍文档。就从网上找了一篇文档，常用的API都提及到了，不过也不可能面面俱到，当我们写自动化测试用例的时候，都要想一下有没有能解决你问题的函数？然后可以去Appium下查找，这样才能更好地解决你遇到的问题。
  举个例子，当我们对某个功能进行测试的时候，首先要对其进行操作，这个时候就要考虑到相应的点击函数，输入操作函数都有哪儿些儿？验证结果的时候，我们要检测操作产生的结果是不是与我们预期的一致？那这就要去考虑相应的Assert函数了。要有发散思维的精神，不能局限于程序本身。
3.3 本章小结
  在本章我们介绍了Appium常用的一些儿API函数，虽然不能面面俱到，大家看了一下也许不能全部会用，但也要有个印象。等你在编写测试用例的过程中，如果遇到了相关的操作，能有个印象，然后利用编辑器的联想功能就可以查找到相应的API函数了。在后面的教程中，我们会陆续进行展开，使你可以着手对任何一个App编写对应的自动化测试用例。


